#!/bin/bash
    clear
    cd 
    echo "File Management - Beginner level selected."
    echo "This guide we will learn about creating and deleting files and directories and basic text editing"
    echo ""
    echo "CHAPTER 1: CREATING AND DELETING FILES AND DIRECTORIES"
    echo "Step 1: First let's see where we are. Use the 'pwd' command."
    echo ""
    read -p "Enter command: "
    eval "pwd"
    echo ""
    echo "Step 2: Now let's create a new file here named 'my_file'. Use the command 'touch my_file'."
    echo "The touch command is used to create files and will come in very handy later on when we want to save important data."
    echo ""
    read -p "Enter command: "
    eval "touch my_file"
    echo ""
    echo "Step 3: Let's confirm that the file was made by using the 'ls' command."
    echo ""
    read -p "Enter command: "
    eval "ls"
    echo ""
    echo "Step 4: Great! Now let's learn how to copy the file. Use the command 'cp my_file my_file2'."
    echo "cp is used to copy a file. You specify the source file and destination file after the command. A source path and destination path can also be included if you want to copy a file into another directory while you are located in a totally different directory."
    echo ""
    read -p "Enter command: "
    eval "cp my_file my_file2"
    echo ""
    echo "Step 5: Again let's confirm with the 'ls' command."
    echo ""
    read -p "Enter command: "
    eval "ls"
    echo ""
    echo "Step 6: Now we know how to create and copy files but what about directories? Use the command 'mkdir my_dir'."
    echo "mkdir stands for 'make directory'."
    echo ""
    read -p "Enter command: "
    eval "mkdir my_dir"
    echo ""
    echo "Step 7: Now let's move 'my_file2' to our new directory. Use the command 'mv my_file2 my_dir/'."
    echo "The '/' is important to specify that it is a path and not a file. mv stands for 'move'. This is equivalent to 'cut & paste' so this command could also be used to overwrite another file or to rename the file (basically move the file onto another file). That's why the '/' is important for the terminal to know to move this file into another directory."
    echo ""
    read -p "Enter command: "
    eval "mv my_file2 my_dir/"
    echo ""
    echo "Step 8: Now let's us go into the directory and confirm that the file is there. Commands: 'cd' & 'ls'"
    echo ""
    read -p "Enter the first command: "
    eval "cd my_dir"
    echo ""
    read -p "Enter second command: "
    eval "ls"
    echo ""
    echo "Great! Now let's go back by using 'cd ..'."
    echo ""
    read -p "Enter command: "
    eval "cd .."
    echo ""
    echo "Step 9: Okay! Now we are going to remove our folder with the file inside. Use the command 'rmdir my_dir'."
    echo ""
    read -p "Enter commnad: "
    eval "rmdir my_dir"
    echo ""
    echo "As you may noticed we could not remove the directory because it's not empty. The fact is that 'rmdir' only remove empty folders. If we want to remove a folder and all its contents we need to use 'rm -r my_dir'."
    echo "rm stands for 'remove' and the '-r' options means 'recursive'."
    echo ""
    read -p "Enter command: "
    eval "rm -r my_dir"
    echo ""
    echo "Let's use 'pwd' to see what happened."
    echo ""
    read -p "Enter command: "
    eval "pwd"
    echo ""
    echo "As you can see the directory is now gone. But what if we just removed the wrong directory? Then we would be in trouble. There is no way to undo the 'rm' command. Therefore it is very important to be cautious. What we can do is adding the option '-i' that will prompt us before the file is removed. Try it on my_file by typing 'rm -i my_file'."
    echo ""
    read -p "Enter command: "
    eval "rm -i my_file"
    echo ""
    echo "This is a safer way to use the 'rm' command, at least it gives you a second thought."
    echo ""
    echo "CONGRATULATIONS! You have now learned about basic file management!"
    echo ""
    read -p "Press enter to go to the next chapter."
    #-------------------------------------------
    clear
    echo "CHAPTER 2: BASIC TEXT EDITING"
    echo "Let's create a file named 'mytextfile'. Use the command 'touch mytextfile'."
    echo ""
    read -p "Enter command: "
    eval "touch mytextfile"
    echo ""
    echo "Great! But how do we open or edit this file? To do this we are going to use a text editor."
    echo "There are many different text editors out there for example nano, vi, emacs, vim etc."
    echo "These are all text editors used inside the terminal. Most linux systems use 'vi' as their default text editor."
    echo ""
    echo "Now open a new terminal so you can follow this guide alongside the editor."
    echo "In the new terminal window use the command 'vi mytextfile'."
    read -p "Press enter to continue"
    echo ""
    echo "Write 'This is my text file.' and save by pressing the Esc-key and type ':w' followed by pressing Enter."
    read -p "Press enter to continue"
    echo ""
    echo "Now add 'I love Linux' and press the Esc-key and instead type ':q!' followed by pressing Enter."
    read -p "Press enter to continue"
    echo ""
    echo "As you noticed the ':q!' command exited the editor."
    echo "Now close the other terminal window."
    read -p "Press enter to continue"
    echo ""
    echo "To display the contents of files we use the 'cat' command which stands for concatenate. Now use the command 'cat mytextfile'."
    echo ""
    read -p "Enter command: "
    eval "cat mytextfile"
    echo ""
    echo "As you can see 'I love linux' is missing. What happened?"
    echo "When we press the Esc-key inside the vi editor it switches from editing mode to command mode."
    echo "The command ':w' is equal to save and the command ':q' means quit, however the '!' after the ':q' means force quit."
    echo "So when we typed ':w' we saved the first part 'This is my text file.' but after we added 'I love linux' we force quit the editor without saving. To save and quit we can combine the commands into ':wq' this would have saved the changes before we quit."
    echo ""
    echo "Congratulations! You have now learned basic text editing!"
    read -p "Press enter to go back to the main menu."
    show_main_menu
    
    
    
    
