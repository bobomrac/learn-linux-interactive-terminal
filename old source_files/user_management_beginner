#!/bin/bash
clear
echo "User Management - Beginner"
echo "In this guide we will learn how to add/delete users and groups and manage their permissions."
echo ""
echo "CHAPTER 1: USERS"
echo "First let's see who is currently logged in with the 'who' command."
echo ""
read -p "Enter command: "
eval "who"
echo ""
echo "Proceed by creating a new user named 'my_user'. Use the command 'sudo adduser my_user'."
echo "This command will prompt you to enter a password for the new user and some other information such as the user's full name."
echo ""
read -p "Enter command: "
eval "sudo adduser my_user"
echo ""
read -p "Press enter to continue."
echo ""
echo "Now let's make a file named 'my_file' in 'my_user' home directory. Use the command 'sudo touch my_file /home/my_user/'"
echo ""
read -p "Enter command: "
eval "sudo touch my_file /home/my_user/"
echo ""
echo "In order to manage user permissions we must first understand them. Change directory to the new users home folder by using the command 'sudo cd /home/my_user/'."
echo ""
read -p "Enter command:"
eval "sudo cd /home/my_user/"
echo ""
echo "Now list all the files in the directory with 'ls -l'."
echo ""
read -p "Enter command: "
eval "ls -l"
echo ""
echo "As you can see there are combinations that looks like this 'drwxrwxrwx'."
echo "These combinations gives information about the permissions to each file or directory."
echo ""
echo "The first character in these combinations is either a '-' or 'd'. This tells you if its a file or directory."
echo "Where '-' means its a file and 'd' means its a directory."
echo "The rest of the combination contain three sets of characters which display the permissions. The first three characters represent the owner's permissions, the next three characters represent the group permissions, and the last three characters represent the permissions for others. Each set of three characters is made up of the characters r (for read), w (for write), and x (for execute), and can be present or absent to indicate the corresponding permission."
echo ""
read -p "Press enter to continue."
echo ""
echo "To change permissions for a file or directory we use the 'chmod' command, which stands for 'change mode'."
echo "Permissions in the command are represented by a 3-digit number (e.g. 764). The first digit represents the owner's permissions, the second the group's, and the third others. To use chmod, specify the new permissions as a 3-digit number (e.g. sudo chmod 764 my_file). The digit value is calculated by adding values for read (4), write (2), and execute (1). In the example the owner would have full access (7), the group would be able to read and write (6) and others would only be able to read the file (4)."
echo ""
read -p "Press enter to continue."
echo ""
echo "Let's practice by taking away all permissions with 'sudo chmod 000 my_file'."
echo ""
read -p "Enter command: "
eval "sudo chmod 000 my_file"
echo ""
echo "Now let's confirm by using the 'ls -l' command again."
echo ""
read -p "Enter command: "
eval "ls -l"
echo ""
echo "Now change the permissions to full access for everyone. Use the command 'sudo chmod 777 my_file'."
echo ""
read -p "Enter command: "
eval "sudo chmod 777 my_file"
echo ""
echo "Now let's confirm again with 'ls -l'."
echo ""
read -p "Enter command: "
eval "ls -l"
echo ""
echo "As you noticed the permissions changed. I hope you understood the numeric value, it can be a little tricky at first."
echo ""
read -p "Press enter to go to the next chapter."
#---------------------------------------------------
echo "CHAPTER 2: GROUPS"
echo "In Linux, a group is a collection of user accounts that are assigned the same permissions and access rights to files, directories, and other resources. Group membership allows you to manage access to shared resources more easily, as changes made to a group apply to all members of that group."
echo ""
echo "There are a number of default groups in linux but to understand how they work we are first going to learn how to create a new group named 'my_group'."
echo "Use the command: 'sudo groupadd my_group'."
echo ""
read -p "Enter command: "
eval "sudo groupadd my_group"
echo ""
echo "Let's see what group 'my_user' from the previous chapter belongs to by using the command 'sudo groups my_user'."
echo ""
read -p "Enter command: "
eval "sudo groups my_user"
echo ""
echo "We now want to add 'my_user' to our new group. To do this we use the command 'sudo usermod -aG my_group'."
echo ""
read -p "Enter command: "
eval "sudo usermod -aG my_group"
echo ""
echo "Now let's check if it worked with 'sudo groups my_user'."
echo ""
read -p "Enter command: "
eval "sudo groups my_user"
echo ""
echo "You can switch to the new user by using the command 'su my_user'."
echo "su stands for 'switch user'. You will be prompted to enter the password for the user."
echo ""
read -p "Enter command: "
eval "su my_user"
echo ""
echo "Now let's switch back to the original user by using the command 'exit'."
echo ""
read -p "Enter command: "
eval "exit"
echo ""
echo "Now we want to know how to remove a user from a group. Use the command 'sudo usermod -G my_group -R my_user'"
echo "There are different ways to add and remove users from groups but these are a simple way to learn the basics."
echo ""
read -p "Enter command: "
eval "sudo usermod -G sudo -R my_user"
echo ""
echo "Let's confirm again what group the user has by using the command 'sudo groups my_user'."
echo ""
read -p "Enter command: "
eval "sudo groups my_user"
echo ""
echo "Good job!"
echo "Now we want to delete the user. Use the command 'sudo userdel my_user'."
echo "This command will delete the user and its home directory."
echo ""
read -p "Enter command: "
eval "sudo userdel my_user"
echo ""
echo "Let's confirm that the user is deleted by using the command 'sudo id my_user'."
echo "This command should return 'id: my_user: no such user'."
echo ""
read -p "Enter command: "
eval "sudo id my_user"
echo ""
echo "Great job! You know now basic user management!"
echo "Lastly I want to mention that you can change the ownership of a file or directory with 'chown' and 'chgrp'."
echo "These stands for 'change owner' and 'change group' which you can decide which user or group should have ownership of a file or directory."
echo ""
read -p "Press enter to go back to the main menu."
show_main_menu

