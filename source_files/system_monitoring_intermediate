#!/bin/bash
clear
echo "=== System Monitoring - Intermediate Level ==="
echo "This guide will teach you advanced system monitoring techniques, including advanced process monitoring, network performance analysis, and log management."
echo ""

# CHAPTER 1: ADVANCED PROCESS MONITORING
echo "=== CHAPTER 1: ADVANCED PROCESS MONITORING ==="
echo "Let's start by learning advanced techniques for monitoring system processes."
echo ""

# Step 1: Monitor processes with htop
echo "Step 1: Monitor processes with htop."
echo "The 'htop' command provides an interactive and more detailed view of system processes compared to 'top'."
echo "Run the command: 'htop'."
echo ""
read -p "Write the command & press Enter: "
eval "htop"
echo ""
echo "The 'htop' command displays:"
echo "1. A color-coded list of processes."
echo "2. CPU, memory, and swap usage."
echo "3. The ability to sort processes by various criteria."
echo ""
echo "Press 'q' to exit 'htop'."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 2: Monitor process resource usage
echo "Step 2: Monitor process resource usage."
echo "The 'ps' command can be used to display detailed information about processes. Let's list all processes with their memory and CPU usage."
echo "Run the command: 'ps aux'."
echo ""
read -p "Write the command & press Enter: "
eval "ps aux"
echo ""
echo "The output shows:"
echo "1. User: The user running the process."
echo "2. PID: The process ID."
echo "3. %CPU: CPU usage by the process."
echo "4. %MEM: Memory usage by the process."
echo "5. Command: The command that started the process."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 3: Monitor process file usage
echo "Step 3: Monitor process file usage."
echo "The 'lsof' command lists files opened by processes. Let's list files opened by the current user."
echo "Run the command: 'lsof -u $USER'."
echo ""
read -p "Write the command & press Enter: "
eval "lsof -u $USER"
echo ""
echo "The output shows:"
echo "1. Command: The command that opened the file."
echo "2. PID: The process ID."
echo "3. User: The user running the process."
echo "4. FD: File descriptor."
echo "5. Type: File type."
echo "6. Name: File name."
echo ""
read -p "Press Enter to continue."
echo ""

# CHAPTER 2: NETWORK PERFORMANCE ANALYSIS
clear
echo "=== CHAPTER 2: NETWORK PERFORMANCE ANALYSIS ==="
echo "Now let's learn how to analyze network performance using advanced tools."
echo ""

# Step 4: Monitor network performance with nload
echo "Step 4: Monitor network performance with nload."
echo "The 'nload' command provides a real-time view of network traffic and bandwidth usage."
echo "Run the command: 'nload'."
echo ""
read -p "Write the command & press Enter: "
eval "nload"
echo ""
echo "The 'nload' command displays:"
echo "1. Incoming and outgoing traffic in real-time."
echo "2. Total data sent and received."
echo ""
echo "Press 'q' to exit 'nload'."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 5: Analyze network traffic with tcpdump
echo "Step 5: Analyze network traffic with tcpdump."
echo "The 'tcpdump' command captures and analyzes network traffic. Let's capture traffic on 'eth0'."
echo "Run the command: 'sudo tcpdump -i eth0'."
echo ""
read -p "Write the command & press Enter: "
eval "sudo tcpdump -i eth0"
echo ""
echo "You should see network traffic being captured in real-time. Press Ctrl+C to stop."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 6: Save network traffic to a file
echo "Step 6: Save network traffic to a file."
echo "You can save captured network traffic to a file for later analysis."
echo "Run the command: 'sudo tcpdump -i eth0 -w capture.pcap'."
echo ""
read -p "Write the command & press Enter: "
eval "sudo tcpdump -i eth0 -w capture.pcap"
echo ""
echo "Network traffic is being captured and saved to 'capture.pcap'. Press Ctrl+C to stop."
echo ""
read -p "Press Enter to continue."
echo ""

# CHAPTER 3: LOG MANAGEMENT
clear
echo "=== CHAPTER 3: LOG MANAGEMENT ==="
echo "Now let's learn how to manage and analyze system logs."
echo ""

# Step 7: View system logs
echo "Step 7: View system logs."
echo "The 'journalctl' command is used to view system logs. Let's view the logs from the last hour."
echo "Run the command: 'sudo journalctl --since "1 hour ago"'."
echo ""
read -p "Write the command & press Enter: "
eval "sudo journalctl --since '1 hour ago'"
echo ""
echo "The output shows system logs from the last hour."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 8: Filter logs by priority
echo "Step 8: Filter logs by priority."
echo "You can filter logs by priority (e.g., error, warning) using 'journalctl'."
echo "Run the command: 'sudo journalctl -p err'."
echo ""
read -p "Write the command & press Enter: "
eval "sudo journalctl -p err"
echo ""
echo "The output shows only error-level logs."
echo ""
read -p "Press Enter to continue."
echo ""

# Step 9: Monitor logs in real-time
echo "Step 9: Monitor logs in real-time."
echo "You can monitor logs in real-time using the 'tail' command."
echo "Run the command: 'sudo tail -f /var/log/syslog'."
echo ""
read -p "Write the command & press Enter: "
eval "sudo tail -f /var/log/syslog"
echo ""
echo "You should see new log entries as they are written. Press Ctrl+C to stop."
echo ""
read -p "Press Enter to continue."
echo ""

# CONCLUSION
echo "=== CONGRATULATIONS! ==="
echo "You've completed the intermediate level of system monitoring!"
echo "You've learned advanced process monitoring, network performance analysis, and log management techniques."
echo ""
read -p "Press Enter to return to the main menu."
show_main_menu